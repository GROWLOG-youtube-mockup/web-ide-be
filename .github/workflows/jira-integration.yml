name: Create Jira Issue and Branch from Issue Form

on:
  issues:
    types: [opened]

permissions:
  issues: write
  contents: write

jobs:
  automation:
    runs-on: ubuntu-latest

    steps:
      # 0. GitHub 이슈 폼 파싱
      - name: Parse issue form
        id: parser
        uses: stefanbuck/github-issue-parser@v3
        with:
          template-path: .github/ISSUE_TEMPLATE/issue-template.yml
          issue-body: ${{ github.event.issue.body }}

      # 1. Jira 로그인
      - name: Login to Jira
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

      # 2. Jira 이슈 설명(description) 조합
      - name: Prepare Jira Description
        id: prep_description
        run: |
          DESCRIPTION="${{ steps.parser.outputs.issue_description }}"
          TASKS_RAW="${{ steps.parser.outputs.task_list }}"
          
          if [ -n "$TASKS_RAW" ]; then
            TASKS=$(echo "$TASKS_RAW" | sed 's/^/- [ ] /')
            DESCRIPTION="$DESCRIPTION\n\n---\n### 작업 목록\n$TASKS"
          fi
          
          DESCRIPTION="$DESCRIPTION\n\n---\n*Original GitHub Issue:* ${{ github.event.issue.html_url }}"
          echo "description<<EOF" >> $GITHUB_OUTPUT
          echo "$DESCRIPTION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 3. Jira 이슈 생성
      - name: Create Jira Issue
        id: create_jira
        uses: atlassian/gajira-create@v3
        with:
          project: ${{ secrets.JIRA_PROJECT_KEY }}
          issuetype: ${{ steps.parser.outputs.issue_type }}
          summary: ${{ github.event.issue.title }}
          description: ${{ steps.prep_description.outputs.description }}
          parent: ${{ steps.parser.outputs.epic_number }}

      # 4. GitHub 이슈 제목에 Jira 키 추가
      - name: Update GitHub Issue Title
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              title: `[${{ steps.create_jira.outputs.issue }}] ${{ github.event.issue.title }}`
            });

      # 5. GitHub 레이블 추가
      - name: Add GitHub Labels
        if: steps.parser.outputs.issue_label != ''
        uses: actions/github-script@v7
        with:
          script: |
            const labels = JSON.parse(`${{ steps.parser.outputs.issue_label }}`);
            if (labels.length > 0) {
              github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }

      # 6. 브랜치 자동 생성
      - name: Checkout repository
        if: steps.parser.outputs.branch_name != ''
        uses: actions/checkout@v4

      - name: Create Branch
        if: steps.parser.outputs.branch_name != ''
        run: |
          JIRA_KEY="${{ steps.create_jira.outputs.issue }}"
          BRANCH_SUFFIX="${{ steps.parser.outputs.branch_name }}"
          BRANCH_NAME="feat/${BRANCH_SUFFIX}_${JIRA_KEY}"

          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

          git fetch origin main
          git checkout -b "$BRANCH_NAME" origin/main
          git push origin "$BRANCH_NAME"

          echo "Branch '$BRANCH_NAME' created and pushed."